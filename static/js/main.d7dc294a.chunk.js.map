{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","min","useState","Math","floor","random","setRandom","referent","setReferent","annotation","setAnnotation","referentUrl","setReferentUrl","imageUrl","setImageUrl","useEffect","a","fetch","response","json","body","meta","status","fragment","words","dom","children","map","child","join","toLowerCase","startsWith","endsWith","url","req","className","src","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAmEeA,EA/DH,WAEV,IACMC,EAAM,SAHI,EAMYC,mBAASC,KAAKC,MAAM,QAAAD,KAAKE,SAAyBJ,IAN9D,mBAMTI,EANS,KAMDC,EANC,OAOgBJ,mBAAS,IAPzB,mBAOTK,EAPS,KAOCC,EAPD,OAQoBN,mBAAS,IAR7B,mBAQTO,EARS,KAQGC,EARH,OASsBR,mBAAS,sBAT/B,mBASTS,EATS,KASIC,EATJ,OAUgBV,mBAAS,IAVzB,mBAUTW,EAVS,KAUCC,EAVD,KAwChB,OA5BAC,qBAAU,YAEC,uCAAG,oCAAAC,EAAA,sEACaC,IAAM,sCAAD,OAAuCZ,EAAvC,0BAblB,qEAYA,cACJa,EADI,gBAGSA,EAASC,OAHlB,OAIe,OADnBC,EAHI,QAIDC,KAAKC,QACNC,EAAWH,EAAKF,SAASX,SAASgB,SAClCC,EAFsB,UAEdJ,EAAKF,SAAST,WAAWW,KAAKK,IAAIC,gBAFpB,aAEd,EAA4CC,KAAI,SAACC,GAAD,OAAgBA,EAAMF,YAAUG,KAAK,KAE/FN,EAASO,cAAcC,WAAW,SAAWR,EAASO,cAAcE,SAAS,QAC/ElB,EAAYS,IAEZb,EAAcc,GACdhB,EAAYe,IAGdX,EAAeQ,EAAKF,SAASX,SAAS0B,MAEtC3B,EAAUH,KAAKC,MAAM,QAAAD,KAAKE,SAAyBJ,IAjB3C,2CAAH,qDAsBTiC,KACC,CAAC7B,IAIF,qBAAK8B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACGtB,GAAY,qBAAKuB,IAAKvB,EAAUsB,UAAU,WAAWE,IAAI,KACzD9B,GAAY,yCACFA,KAEVE,GAAc,6CACAA,KAEf,mBACE0B,UAAU,WACVG,KAAM3B,EACN4B,OAAO,SACPC,IAAI,sBAJN,+BCxCOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7dc294a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport fetch from 'node-fetch';\n\nconst App = () => {\n\n  const token = 'tgwOHu-njUlWatAIyRQRSEB0hKBweUpTHF9Cwz_MgA119iBHL73v7wXIpALVRanp'\n  const min = 10000001\n  const max = 19993999\n\n  const [random, setRandom] = useState(Math.floor(Math.random() * (max - min) + min))\n  const [referent, setReferent] = useState('')\n  const [annotation, setAnnotation] = useState('')\n  const [referentUrl, setReferentUrl] = useState('https://genius.com')\n  const [imageUrl, setImageUrl] = useState('')\n\n  useEffect(() => {\n\n    const req = async () => {\n      const response = await fetch(`https://api.genius.com/annotations/${random}/?access_token=${token}`);\n    \n      const body = await response.json();\n      if (body.meta.status === 200) {\n        const fragment = body.response.referent.fragment\n        const words = body.response.annotation.body.dom.children?.map((child: any) => child.children).join(\" \")\n\n        if (fragment.toLowerCase().startsWith('http') && fragment.toLowerCase().endsWith('.jpg')) {\n          setImageUrl(fragment)\n        } else {\n          setAnnotation(words)\n          setReferent(fragment)\n        }\n\n        setReferentUrl(body.response.referent.url)\n      } else {\n        setRandom(Math.floor(Math.random() * (max - min) + min))\n      }\n\n    }\n\n    req()\n  }, [random])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {imageUrl && <img src={imageUrl} className=\"App-logo\" alt=\"\" /> }\n        {referent && <p>\n          Lyrics: {referent}\n        </p>}\n        {annotation && <p>\n          Annotation: {annotation}\n        </p>}\n        <a\n          className=\"App-link\"\n          href={referentUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Open Lyrics\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}